// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: distask.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Distask.Contracts {
  public static partial class DistaskService
  {
    static readonly string __ServiceName = "distask.contracts.DistaskService";

    static readonly grpc::Marshaller<global::Distask.Contracts.DistaskRequest> __Marshaller_distask_contracts_DistaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.DistaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Distask.Contracts.DistaskResponse> __Marshaller_distask_contracts_DistaskResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.DistaskResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Distask.Contracts.PingRequest> __Marshaller_distask_contracts_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Distask.Contracts.PingResponse> __Marshaller_distask_contracts_PingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.PingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Distask.Contracts.DistaskRequest, global::Distask.Contracts.DistaskResponse> __Method_Execute = new grpc::Method<global::Distask.Contracts.DistaskRequest, global::Distask.Contracts.DistaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Execute",
        __Marshaller_distask_contracts_DistaskRequest,
        __Marshaller_distask_contracts_DistaskResponse);

    static readonly grpc::Method<global::Distask.Contracts.PingRequest, global::Distask.Contracts.PingResponse> __Method_Ping = new grpc::Method<global::Distask.Contracts.PingRequest, global::Distask.Contracts.PingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_distask_contracts_PingRequest,
        __Marshaller_distask_contracts_PingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Distask.Contracts.DistaskReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DistaskService</summary>
    public abstract partial class DistaskServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Distask.Contracts.DistaskResponse> Execute(global::Distask.Contracts.DistaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Distask.Contracts.PingResponse> Ping(global::Distask.Contracts.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DistaskService</summary>
    public partial class DistaskServiceClient : grpc::ClientBase<DistaskServiceClient>
    {
      /// <summary>Creates a new client for DistaskService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DistaskServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DistaskService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DistaskServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DistaskServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DistaskServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Distask.Contracts.DistaskResponse Execute(global::Distask.Contracts.DistaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Execute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Distask.Contracts.DistaskResponse Execute(global::Distask.Contracts.DistaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Execute, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.DistaskResponse> ExecuteAsync(global::Distask.Contracts.DistaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.DistaskResponse> ExecuteAsync(global::Distask.Contracts.DistaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Execute, null, options, request);
      }
      public virtual global::Distask.Contracts.PingResponse Ping(global::Distask.Contracts.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Distask.Contracts.PingResponse Ping(global::Distask.Contracts.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.PingResponse> PingAsync(global::Distask.Contracts.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.PingResponse> PingAsync(global::Distask.Contracts.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DistaskServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DistaskServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DistaskServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Execute, serviceImpl.Execute)
          .AddMethod(__Method_Ping, serviceImpl.Ping).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DistaskServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Execute, serviceImpl.Execute);
      serviceBinder.AddMethod(__Method_Ping, serviceImpl.Ping);
    }

  }
  public static partial class DistaskRegistrationService
  {
    static readonly string __ServiceName = "distask.contracts.DistaskRegistrationService";

    static readonly grpc::Marshaller<global::Distask.Contracts.RegistrationRequest> __Marshaller_distask_contracts_RegistrationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.RegistrationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Distask.Contracts.RegistrationResponse> __Marshaller_distask_contracts_RegistrationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Distask.Contracts.RegistrationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Distask.Contracts.RegistrationRequest, global::Distask.Contracts.RegistrationResponse> __Method_Register = new grpc::Method<global::Distask.Contracts.RegistrationRequest, global::Distask.Contracts.RegistrationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_distask_contracts_RegistrationRequest,
        __Marshaller_distask_contracts_RegistrationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Distask.Contracts.DistaskReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of DistaskRegistrationService</summary>
    public abstract partial class DistaskRegistrationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Distask.Contracts.RegistrationResponse> Register(global::Distask.Contracts.RegistrationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DistaskRegistrationService</summary>
    public partial class DistaskRegistrationServiceClient : grpc::ClientBase<DistaskRegistrationServiceClient>
    {
      /// <summary>Creates a new client for DistaskRegistrationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DistaskRegistrationServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DistaskRegistrationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DistaskRegistrationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DistaskRegistrationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DistaskRegistrationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Distask.Contracts.RegistrationResponse Register(global::Distask.Contracts.RegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Distask.Contracts.RegistrationResponse Register(global::Distask.Contracts.RegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.RegistrationResponse> RegisterAsync(global::Distask.Contracts.RegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Distask.Contracts.RegistrationResponse> RegisterAsync(global::Distask.Contracts.RegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DistaskRegistrationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DistaskRegistrationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DistaskRegistrationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DistaskRegistrationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl.Register);
    }

  }
}
#endregion
